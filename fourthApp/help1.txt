for adding new record
changes requires on product service

 /*
    Allows adding of products to the Observable
  */

  //Action Stream

  private productInsertedSubject = new Subject<Product>();
  productInsertedAction$ = this.productInsertedSubject.asObservable();

  //merge with stream

  productsWithAdd$ = merge(
    this.productswithcategories$,
    this.productInsertedAction$
  ).pipe(
    scan((acc: Product[], value: Product) => [...acc, value]),
    catchError(err => {
      console.log(err);
      return throwError(err);
    })
  );

  addProduct(newProduct?: Product) {
    newProduct = newProduct || this.fakeProduct();
    this.productInsertedSubject.next(newProduct);
  }



product list component



//creating new observable with add

  productsWithAdd$ = combineLatest([
    this.productService.productsWithAdd$,
    this.categorySelectedAction$
  ]).pipe(
    map(([products, selectedCategoryId]) => {
      return products.filter(product =>
        selectedCategoryId ? product.categoryId === selectedCategoryId : true
      );
    }),
    catchError(err => {
      this.errorMessageSubject.next(err);
      return EMPTY;
    })
  );


final change on html to display record from newly created observablel,



for product details page.
on product service

// Action stream for product selection
  // Default to 0 for no product
  // Must have a default so the stream emits at least once.
  private productSelectedSubject = new BehaviorSubject<number>(0);
  productSelectedAction$ = this.productSelectedSubject.asObservable();

  // Currently selected product
  // Used in both List and Detail pages,
  // so use the shareReply to share it with any component that uses it

  selectedProduct$ = combineLatest([
    this.productswithcategories$,
    this.productSelectedAction$
  ]).pipe(
    map(([products, selectedProductId]) => {
      return products.find(product => product.id === selectedProductId);
    }),
    tap(data => console.log("selected Product ", JSON.stringify(data))),
    shareReplay(1),
    catchError(this.handleError)
  );

  //change the selectedProduct

  selectedProductChanged(selectedProductId: number) {
    this.productSelectedSubject.next(selectedProductId);
  }




product details page 


//selected product to display
  product$=this.productService.selectedProduct$.pipe(
    catchError(err=>{
      this.errorMessageSubject.next(err);
      return EMPTY;
    })
  );




supplier mate 
product service ma


// Suppliers for the selected product
  // Finds suppliers from download of all suppliers
  // Add a catchError so that the display appears
  // even if the suppliers cannot be retrieved.
  // Note that it must return an empty array and not EMPTY
  // or the stream will complete.
  selectedProductSuppliers$ = combineLatest([
    this.selectedProduct$,
    this.supplierService.suppliers$.pipe(
      catchError(err => of([] as Supplier[]))
    )
  ]).pipe(
    map(([selectedProduct, suppliers]) =>
      suppliers.filter(supplier =>
        selectedProduct
          ? selectedProduct.supplierIds.includes(supplier.id)
          : EMPTY
      )
    )
  );

  // Suppliers for the selected product
  // Only gets the suppliers it needs
  selectedProductSuppliers2$ = this.selectedProduct$.pipe(
    filter(selectedProduct => Boolean(selectedProduct)),
    switchMap(selectedProduct =>
      from(selectedProduct.supplierIds).pipe(
        mergeMap(supplierId =>
          this.http.get<Supplier>(`${this.suppliersUrl}/${supplierId}`)
        ),
        toArray(),
        tap(suppliers =>
          console.log("product suppliers", JSON.stringify(suppliers))
        )
      )
    )
  );


product detail page 


 // Suppliers for this product
   productSuppliers$ = this.productService.selectedProductSuppliers2$
   .pipe(
     catchError(err => {
       this.errorMessageSubject.next(err);
       return EMPTY;
     }));